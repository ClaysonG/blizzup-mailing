/**
 * Mailing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import QueryMailTemplateResponse from '../model/QueryMailTemplateResponse';
import SendMailRequest from '../model/SendMailRequest';
import TemplateRequest from '../model/TemplateRequest';
import TemplateResponse from '../model/TemplateResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTemplate operation.
     * @callback module:api/DefaultApi~createTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Endpoint used to create a query.
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateRequest} opts.templateRequest 
     * @param {module:api/DefaultApi~createTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResponse}
     */
    createTemplate(opts, callback) {
      opts = opts || {};
      let postBody = opts['templateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplate operation.
     * @callback module:api/DefaultApi~deleteTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} id Id of the template
     * @param {module:api/DefaultApi~deleteTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResponse}
     */
    deleteTemplate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/template/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryTemplates operation.
     * @callback module:api/DefaultApi~queryTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryMailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Your GET endpoint
     * Endpoint used to query the template.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterId Filters by ids. Example filter[ids]=1,2,3
     * @param {module:api/DefaultApi~queryTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryMailTemplateResponse}
     */
    queryTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[id]': opts['filterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryMailTemplateResponse;
      return this.apiClient.callApi(
        '/template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMail operation.
     * @callback module:api/DefaultApi~sendMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Endpoint used to send mail.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendMailRequest} opts.sendMailRequest 
     * @param {module:api/DefaultApi~sendMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    sendMail(opts, callback) {
      opts = opts || {};
      let postBody = opts['sendMailRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/templates/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplate operation.
     * @callback module:api/DefaultApi~updateTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id Id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateRequest} opts.templateRequest 
     * @param {module:api/DefaultApi~updateTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResponse}
     */
    updateTemplate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['templateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/template/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
